for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
plot(density(params[k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
View(sum_stat_obs)
print(sum_stat_obs[loc.idx,])
# Model output for this set of params
print('True respirations/productions:')
print(sum_stat_obs[loc.idx,])
print('Predicted respirations/productions:')
pred = anderson(best_joint_params[1,])
print(pred)
print('Distance:')
print('True respirations/productions:')
print(sum_stat_obs[loc.idx,])
print('Predicted respirations/productions:')
pred = anderson(best_joint_params[1,])
print(pred)
print('Distance:')
print(euc.dist(matrix(pred,1), as.numeric(matrix(c(sum_stat_obs[loc.idx,]),1))))
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
plot(density(params[k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
params[k]
params[,k]
params
ABC_rej[[1]]$param
priors
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
hist(params[,k], main = '1')
hist(params[,k], main = main = TeX(anderson_labels[k]))
hist(params[,k], main = TeX(anderson_labels[k]))
best_joint_params
best_joint_params
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
# Choose colors
cols = sample(color, nb_best_points)
# Plotting the marginal densities along with the best params
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
x11()
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
x11()
par(mfrow=c(4,5))
for (k in 1:n_params){
#plot(0, 0, type = 'n', main = TeX(anderson_labels[k]))
hist(best_joint_params[,k], main = TeX(anderson_labels[k]))
#plot(density(params[,k]), main = TeX(anderson_labels[k]))
for (bp in 1:3){
abline(v = best_joint_params[bp], col = cols[bp])
}
}
best_joint_params
loc.idx
best_joint_params
best_joint_params
best_joint_params
n_params
n
params
nb_best_points
out.flows
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
plot(density(stats.posterior[,k]), main = stats_labels[k])
stats.posterior
p
start = Sys.time()
ABC_rej[[loc.idx]] <- ABC_rejection(model = anderson, prior = priors,
nb_simul=n,
summary_stat_target = c(sum_stat_obs[loc.idx,]),
tol=p, n_cluster = 2)
end  = Sys.time()
print(end - start)
n = 500 # 25 minutes for 20000
p = 500/n
poc = out.flows[loc.idx,'POC net']
doc = out.flows[loc.idx,'DOC net']
ex_act = 3
priors[[1]] = c("unif",poc, poc)
priors[[2]] = c("unif",doc, doc)
priors[[3]] = c("unif",ex_act, ex_act)
start = Sys.time()
ABC_rej[[loc.idx]] <- ABC_rejection(model = anderson, prior = priors,
nb_simul=n,
summary_stat_target = c(sum_stat_obs[loc.idx,]),
tol=p, n_cluster = 2)
end  = Sys.time()
print(end - start)
ABC_rej
ABC_rej
ABC_rejection(model = anderson, prior = priors,
nb_simul=n,
summary_stat_target = c(sum_stat_obs[loc.idx,]),
tol=p, n_cluster = 2)
end  = Sys.time()
priors
setwd("C:/Users/rfuchs/Documents/GitHub/CarbonPump/abc")
source('model.R')
#install.packages("EasyABC")
#install.packages("mnormt")
#install.packages("Rfast")
#install.packages('latex2exp')
library(latex2exp)
library(EasyABC)
library(Rfast)
dmode <- function(x, precision = 512) {
den <- density(x, kernel = c("gaussian"), n = precision)
( den$x[den$y == max(den$y)] )
}
euc.dist <- function(x1, x2) sqrt(rowSums((x1 - x2) ^ 2))
best.comb <- function(params, stats, n){
# Return the n closest combinaisons of parameters
nb_boot = dim(params)[1]
nb_params = dim(params)[2]
distances = c()
best_params = matrix(NA, n, nb_params)
for (i in 1:nb_boot){
pred = anderson(params[i,])
d = euc.dist(matrix(pred,1), as.numeric(matrix(stats,1)))
distances = append(distances, d)
}
for (i in 1:n){
idx = nth(distances, i, descending = F, index.return = T)
best_params[i,] = c(params[idx,])
}
best_params
}
stats.draws <- function(params, nb.outflows){
# Draw samples from the posterior of the summary statistics
nb_boot = dim(params)[1]
# ! The number of summary statistics is hardcoded here
draws = matrix(NA, nb_boot, nb.outflows)
for (i in 1:nb_boot){
pred = anderson(params[i,])
draws[i,] = pred
}
draws
}
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
anderson_labels = c('POC', 'DOC', 'ex_act','$\\psi$', '$\\omega_a$', '$\\omega_{FL}$', '$\\alpha$', '$CF_a$',
'$CF_{FL}$')
stats_labels = c('Production_NonSinking', 'Production_Sinking', 'Respiration_zoo')
#=========================================
# Launching the model
#=========================================
# Priors and summary statistics
nb_params = length(anderson_labels)
priors <- vector("list", nb_params)
# The first 3 flows are the data of POC and DOC and are ruled out later
priors[[4]] = c("unif",0,1)
priors[[5]] = c("unif",0,0.2)
priors[[6]] = c("unif",0,0.2)
priors[[7]] = c("unif",0,1)
priors[[8]] = c("unif",0,5)
priors[[9]] = c("unif",0,5)
out.flows = read.csv('out_flows.csv')
names(out.flows) = c('Cruise', 'Station', 'Depths',
'POC net', 'DOC net', 'prod non sinking',
'prod sinking', 'respi zoo')
sum_stat_obs = out.flows[,c('prod non sinking',
'prod sinking', 'respi zoo')]
nb_station = dim(sum_stat_obs)[1]
nb_stats = length(sum_stat_obs)
# Hyper parameters
n = 500 # 25 minutes for 20000
p = 500/n
ABC_rej = vector("list", nb_station)
setwd("C:/Users/rfuchs/Documents/GitHub/CarbonPump/abc")
source('model.R')
library(latex2exp)
library(EasyABC)
library(Rfast)
dmode <- function(x, precision = 512) {
den <- density(x, kernel = c("gaussian"), n = precision)
( den$x[den$y == max(den$y)] )
}
euc.dist <- function(x1, x2) sqrt(rowSums((x1 - x2) ^ 2))
best.comb <- function(params, stats, n){
# Return the n closest combinaisons of parameters
nb_boot = dim(params)[1]
nb_params = dim(params)[2]
distances = c()
best_params = matrix(NA, n, nb_params)
for (i in 1:nb_boot){
pred = anderson(params[i,])
d = euc.dist(matrix(pred,1), as.numeric(matrix(stats,1)))
distances = append(distances, d)
}
for (i in 1:n){
idx = nth(distances, i, descending = F, index.return = T)
best_params[i,] = c(params[idx,])
}
best_params
}
stats.draws <- function(params, nb.outflows){
# Draw samples from the posterior of the summary statistics
nb_boot = dim(params)[1]
# ! The number of summary statistics is hardcoded here
draws = matrix(NA, nb_boot, nb.outflows)
for (i in 1:nb_boot){
pred = anderson(params[i,])
draws[i,] = pred
}
draws
}
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
anderson_labels = c('POC', 'DOC', 'ex_act','$\\psi$', '$\\omega_a$', '$\\omega_{FL}$', '$\\alpha$', '$CF_a$',
'$CF_{FL}$')
stats_labels = c('Production_NonSinking', 'Production_Sinking', 'Respiration_zoo')
# Priors and summary statistics
nb_params = length(anderson_labels)
priors <- vector("list", nb_params)
# The first 3 flows are the data of POC and DOC and are ruled out later
priors[[4]] = c("unif",0,1)
priors[[5]] = c("unif",0,0.2)
priors[[6]] = c("unif",0,0.2)
priors[[7]] = c("unif",0,1)
priors[[8]] = c("unif",0,5)
priors[[9]] = c("unif",0,5)
out.flows = read.csv('C:/Users/rfuchs/Documents/These/Oceano/carbon_pump_abc/abc/out_flows.csv')
names(out.flows) = c('Cruise', 'Station', 'Depths',
'POC net', 'DOC net', 'prod non sinking',
'prod sinking', 'respi zoo')
sum_stat_obs = out.flows[,c('prod non sinking',
'prod sinking', 'respi zoo')]
nb_station = dim(sum_stat_obs)[1]
nb_stats = length(sum_stat_obs)
# Hyper parameters
n = 500 # 25 minutes for 20000
p = 500/n
ABC_rej = vector("list", nb_station)
loc.idx = 1
poc = out.flows[loc.idx,'POC net']
doc = out.flows[loc.idx,'DOC net']
ex_act = 3
priors[[1]] = c("unif",poc, poc)
priors[[2]] = c("unif",doc, doc)
priors[[3]] = c("unif",ex_act, ex_act)
start = Sys.time()
ABC_rej[[loc.idx]] <- ABC_rejection(model = anderson, prior = priors,
nb_simul=n,
summary_stat_target = c(sum_stat_obs[loc.idx,]),
tol=p, n_cluster = 2)
start = Sys.time()
ABC_rej[[loc.idx]] <- ABC_rejection(model = anderson, prior = priors,
nb_simul=n,
summary_stat_target = c(sum_stat_obs[loc.idx,]),
tol=p)
end  = Sys.time()
print(end - start)
#=====================================
# Plot the stats posterior densities
#=====================================
params = ABC_rej[[1]]$param
params
ABC_rej[[idx.loc]]
ABC_rej[[loc.idx]]$param
#=====================================
# Plot the stats posterior densities
#=====================================
params = ABC_rej[[loc.idx]]$param
poc.doc.ex_act = t(replicate(n, c(poc, doc, ex_act)))
params = cbind(poc.doc.ex_act, params)
stats.posterior = stats.draws(params, nb.outflows = nb_stats)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
density(stats.posterior[,k])
stats.posterior[,k])
stats.posterior[,k]
density(stats.posterior[,k])
sum_stat_obs
par(mfrow=c(2,2), main = '1')
ggtitle('1')
title("11")
title("11")
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
par(mfrow=c(2,2))
title("11")
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
par(mfrow=c(2,2))
title("11")
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
title("11")
title("MM")
title("MM", line = 1)
title("MM", line = 100)
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
title("MM", line = 100)
stats.posterior = stats.draws(params, nb.outflows = nb_stats)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
title("MM", line = 100)
title("MM", line = 10)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
title("MM", line = 10)
mtext("My 'Title' in a strange place", side = 3, line = -21, outer = TRUE)
mtext("My 'Title' in a strange place", side = 1, line = -21, outer = TRUE)
mtext("My 'Title' in a strange place", side = 1, outer = TRUE)
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -21, outer = TRUE)
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -25, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -25, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -21, outer = TRUE)
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -15, outer = TRUE)
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -1, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -1, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -31, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext("My 'Title' in a strange place", side = 1, line = -1, outer = TRUE)
out.flows
cruise = out.flows[loc.idx,'Cruise']
cruise
station = out.flows[loc.idx,'Station']
station
paste(cruise, cruise)
mtext(paste(cruise, station), side = 1, line = -1, outer = TRUE)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext(paste(cruise, station), side = 1, line = -1, outer = TRUE)
png(file=paste("C:/Users/rfuchs/Documents/These/Oceano/carbon_pump_abc/abc/",cruise, station, ".png"),
width=600, height=350)
par(mfrow=c(2,2))
for (k in 1:nb_stats){
plot(density(stats.posterior[,k]), main = stats_labels[k])
abline(v = sum_stat_obs[loc.idx, k], col = 'blue')
}
mtext(paste(cruise, station), side = 1, line = -1, outer = TRUE)
dev.off()
euc.dist
